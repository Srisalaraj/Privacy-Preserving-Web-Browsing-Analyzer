# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lyj6vIMY_U0H69o9eYUhJnsyJ4A5el6e
"""

import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def real_time_simulation(analyzer, data_module, log_file="real_time_results.json"):
    """Interactive simulation with options:
       1. URL check, 2. Wi-Fi check, 3. Exit"""
    print("\n=== Real-Time Web Analyzer Simulation ===")
    print("Options: 1) URL Check  2) Wi-Fi Type Check  3) Exit\n")

    results_log = []

    while True:
        choice = input("Enter choice (1-URL, 2-WiFi, 3-Exit): ").strip()

        if choice == "3":
            break
        elif choice == "1":
            url = input("Enter URL: ").strip()
            hashed_url = data_module.hash_value(url)
            prediction = analyzer.predict(url)
            results_log.append({
                "mode": "URL Check",
                "url_input": url,
                "url_hashed": hashed_url,
                "prediction": prediction
            })
            print(f"ðŸ”— URL: {url}")
            print(f"ðŸ”’ Hashed: {hashed_url[:30]}...")
            print(f"ðŸ“Š Prediction: {prediction}\n")
        elif choice == "2":
            wifi_type = input("Enter Wi-Fi type (Private/Public): ").strip()
            results_log.append({
                "mode": "Wi-Fi Check",
                "wifi_type": wifi_type
            })
            print(f"ðŸ“¶ Wi-Fi Type Recorded: {wifi_type}\n")
        else:
            print("âš  Invalid choice. Please enter 1, 2, or 3.\n")

    # Save results
    if results_log:
        with open(log_file, "w") as f:
            json.dump(results_log, f, indent=4)
        print(f"\nSimulation ended. Results saved in {log_file}")

        # Visualization of URL predictions only
        results_df = pd.DataFrame([r for r in results_log if r["mode"] == "URL Check"])
        if not results_df.empty:
            plt.figure(figsize=(5,4))
            sns.countplot(x="prediction", data=results_df, palette="Set2")
            plt.title("Safe vs Suspicious Predictions (Real-Time)")
            plt.show()
    else:
        print("\nSimulation ended. No results were logged.")